<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sk.blog.dao.ContentsMapper">
    <resultMap id="BaseResultMap" type="com.sk.blog.bean.Contents">
        <id column="cid" jdbcType="INTEGER" property="cid"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="created" jdbcType="INTEGER" property="created"/>
        <result column="modified" jdbcType="INTEGER" property="modified"/>
        <result column="author_id" jdbcType="INTEGER" property="authorId"/>
        <result column="type" jdbcType="VARCHAR" property="type"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>
        <result column="tags" jdbcType="VARCHAR" property="tags"/>
        <result column="categories" jdbcType="VARCHAR" property="categories"/>
        <result column="hits" jdbcType="INTEGER" property="hits"/>
        <result column="comments_num" jdbcType="INTEGER" property="commentsNum"/>
        <result column="allow_comment" jdbcType="BIT" property="allowComment"/>
        <result column="allow_stick" jdbcType="BIT" property="allowStick"/>
        <result column="allow_feed" jdbcType="BIT" property="allowFeed"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.sk.blog.bean.Contents">
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>

    </resultMap>
    <resultMap id="Index" type="com.sk.blog.bean.Contents">
        <id column="cid" jdbcType="INTEGER" property="cid"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="created" jdbcType="INTEGER" property="created"/>
        <result column="tags" jdbcType="VARCHAR" property="tags"/>
        <result column="cname" jdbcType="VARCHAR" property="categories"/>
    </resultMap>
    <select id="selectLastContents" resultType="com.sk.blog.bean.Contents">
        SELECT title,created,cid
        FROM t_contents
        ORDER BY created DESC
        limit 0 , 5
    </select>
    <update id="fewComments">
        UPDATE t_contents
        SET comments_num = comments_num-1
        WHERE cid = #{cid}
    </update>
    <select id="getLastArticles" resultMap="BaseResultMap">
        SELECT comments_num,cid,title
        FROM t_contents
        ORDER BY created DESC
        limit 0,5
    </select>
    <select id="selectCountContents" resultType="Integer">
--         select 'archivesNum' as name,count(*) from t_contents
--         union all
--         select 'commentsNum' as name,count(*) from t_comments
--         UNION ALL
--         SELECT 'lastUpdate' as name,MAX(created) FROM t_contents
            SELECT COUNT(1) as archivesNum
            FROM t_contents
    </select>
    <select id="selectCountComments" resultType="Integer">
         SELECT COUNT(1) as commentsNum
            FROM t_comments
    </select>
    <select id="selectLastUpdate" resultType="long">
        SELECT MAX(modified) as lastUpdate
        FROM t_contents
    </select>
    <select id="selectLastCreated" resultType="long">
        SELECT MAX(created) as lastUpdate
        FROM t_contents
    </select>
    <update id="updateCategory">
        UPDATE t_category
        SET cname = #{cname}
        WHERE kid = #{kid}
    </update>
    <delete id="deleteRelationshipByCid">
        DELETE FROM t_relationship
        WHERE cid = #{cid}
    </delete>
    <update id="updateCommennums">
        UPDATE t_contents SET comments_num = comments_num + 1
        WHERE cid = #{cid}
    </update>
    <delete id="deleteCategory">
        DELETE FROM t_category
        WHERE kid = #{kid}
    </delete>
    <select id="saveCategory" resultType="integer">
        INSERT INTO t_category(cname)
        VALUES (#{cname})
    </select>
    <select id="selectCountByCategory" resultType="integer">
    SELECT count(*) as count
    FROM t_contents  c
    WHERE c.categories LIKE  CONCAT('%',#{cname},'%') AND c.status = 'publish'
    </select>
    <select id="selectAllContents" resultType="com.sk.blog.bean.Contents">
        SELECT c.cid,c.title,c.tags,c.categories,c.created,c.hits,c.status
        FROM t_contents c
        ORDER BY c.created DESC
    </select>
    <select id="selectAllPublishContents" resultMap="BaseResultMap">
        SELECT c.cid,c.title,c.tags,c.categories,c.hits,c.created,c.content,c.allow_stick,c.tags
        FROM t_contents c
        WHERE c.status = 'publish'
        ORDER BY c.allow_stick DESC ,c.created DESC
    </select>
    <insert id="insertRelationship">
        INSERT INTO t_relationship
        VALUES (#{cid},#{kid})
    </insert>
    <select id="selectCateNameById" resultType="string">
        SELECT cname
        FROM t_category
        WHERE kid=#{id}
    </select>
    <select id="selectArticlesByKid" resultMap="BaseResultMap">
        SELECT c.cid,c.title,c.tags,c.created,c.hits,c.allow_stick,c.tags,c.content
        FROM t_contents c
        INNER JOIN t_relationship k ON c.cid = k.cid AND  k.kid = #{kid} AND c.status = 'publish'
        ORDER BY allow_stick DESC, created DESC
    </select>
    <select id="selectIdByName" resultType="integer">
    SELECT kid
    FROM t_category
    WHERE cname=#{name}

  </select>
    <select id="selectCountByCategories" resultType="integer">
    SELECT count(*) as count
    FROM t_relationship,t_contents  c
    WHERE kid=#{kid} AND c.status = 'public'

  </select>
    <select id="index" resultMap="Index">
--     SELECT c.cid,c.title,c.tags,k.cname
--     FROM t_contents c,t_category k,t_relationship r
-- 	WHERE c.cid = r.cid AND k.kid = r.kid
    SELECT c.cid,c.title,c.tags,k.cname
    FROM t_contents c
    INNER JOIN t_relationship r
    ON c.cid = r.cid
    INNER JOIN t_category k
    ON k.kid =  r.kid
  </select>
    <select id="selectByCategoryId" resultMap="Index">
    SELECT c.cid,c.title,k.cname
    FROM t_contents c,t_category k
    WHERselectCountByCategoriesid=#{id}
  </select>
    <select id="getCategoryName" resultType="String">
    SELECT cname FROM t_category WHERE id=#{id}
  </select>
    <select id="getAllCategories" resultType="com.sk.blog.bean.Categories">
    SELECT kid,cname FROM t_category
  </select>
    <select id="getContentsByMonths" resultType="com.sk.blog.bean.Contents">
    SELECT title,created,cid FROM t_contents WHERE DATE_FORMAT(FROM_UNIXTIME(t_contents.`created`/1000),'%Y%m')=#{month}
    AND status = 'publish'
  </select>
    <select id="selectUnixTime" resultType="com.sk.blog.bean.Archives">
   SELECT FROM_UNIXTIME(created/1000,'%Y%m') data,COUNT(cid) COUNT FROM t_contents
   WHERE status = 'publish'
   GROUP BY data
   ORDER BY data DESC

  </select>
    <update id="updateHits" parameterType="com.sk.blog.bean.Contents">
    UPDATE t_contents SET hits=#{hits} WHERE cid =#{cid}
  </update>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    cid, title,created, modified, author_id, type, status, tags, categories, hits,
    comments_num, allow_comment, allow_stick, allow_feed
  </sql>
    <sql id="Blob_Column_List">
    content
  </sql>
    <select id="selectByExampleWithBLOBs" parameterType="com.sk.blog.bean.ContentsExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_contents
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="com.sk.blog.bean.ContentsExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from t_contents
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from t_contents
        where cid = #{cid,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_contents
    where cid = #{cid,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.sk.blog.bean.ContentsExample">
        delete from t_contents
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.sk.blog.bean.Contents" useGeneratedKeys="true" keyProperty="cid">
    insert into t_contents (cid, title,
      created, modified, author_id, 
      type, status, tags, 
      categories, hits, comments_num, 
      allow_comment, allow_stick, allow_feed,
      content)
    values (#{cid,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR},
      #{created,jdbcType=INTEGER}, #{modified,jdbcType=INTEGER}, #{authorId,jdbcType=INTEGER}, 
      #{type,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{tags,jdbcType=VARCHAR}, 
      #{categories,jdbcType=VARCHAR}, #{hits,jdbcType=INTEGER}, #{commentsNum,jdbcType=INTEGER}, 
      #{allowComment,jdbcType=BIT}, #{allowStick,jdbcType=BIT}, #{allowFeed,jdbcType=BIT},
      #{content,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.sk.blog.bean.Contents">
        insert into t_contents
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="cid != null">
                cid,
            </if>
            <if test="title != null">
                title,
            </if>

            <if test="created != null">
                created,
            </if>
            <if test="modified != null">
                modified,
            </if>
            <if test="authorId != null">
                author_id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="tags != null">
                tags,
            </if>
            <if test="categories != null">
                categories,
            </if>
            <if test="hits != null">
                hits,
            </if>
            <if test="commentsNum != null">
                comments_num,
            </if>
            <if test="allowComment != null">
                allow_comment,
            </if>
            <if test="allowStick != null">
                allow_stick,
            </if>
            <if test="allowFeed != null">
                allow_feed,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="cid != null">
                #{cid,jdbcType=INTEGER},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>

            <if test="created != null">
                #{created,jdbcType=INTEGER},
            </if>
            <if test="modified != null">
                #{modified,jdbcType=INTEGER},
            </if>
            <if test="authorId != null">
                #{authorId,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="tags != null">
                #{tags,jdbcType=VARCHAR},
            </if>
            <if test="categories != null">
                #{categories,jdbcType=VARCHAR},
            </if>
            <if test="hits != null">
                #{hits,jdbcType=INTEGER},
            </if>
            <if test="commentsNum != null">
                #{commentsNum,jdbcType=INTEGER},
            </if>
            <if test="allowComment != null">
                #{allowComment,jdbcType=BIT},
            </if>
            <if test="allowStick != null">
                #{allowStick,jdbcType=BIT},
            </if>
            <if test="allowFeed != null">
                #{allowFeed,jdbcType=BIT},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.sk.blog.bean.ContentsExample" resultType="java.lang.Long">
        select count(*) from t_contents
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update t_contents
        <set>
            <if test="record.cid != null">
                cid = #{record.cid,jdbcType=INTEGER},
            </if>
            <if test="record.title != null">
                title = #{record.title,jdbcType=VARCHAR},
            </if>

            <if test="record.created != null">
                created = #{record.created,jdbcType=INTEGER},
            </if>
            <if test="record.modified != null">
                modified = #{record.modified,jdbcType=INTEGER},
            </if>
            <if test="record.authorId != null">
                author_id = #{record.authorId,jdbcType=INTEGER},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=VARCHAR},
            </if>
            <if test="record.tags != null">
                tags = #{record.tags,jdbcType=VARCHAR},
            </if>
            <if test="record.categories != null">
                categories = #{record.categories,jdbcType=VARCHAR},
            </if>
            <if test="record.hits != null">
                hits = #{record.hits,jdbcType=INTEGER},
            </if>
            <if test="record.commentsNum != null">
                comments_num = #{record.commentsNum,jdbcType=INTEGER},
            </if>
            <if test="record.allowComment != null">
                allow_comment = #{record.allowComment,jdbcType=BIT},
            </if>
            <if test="record.allowStick != null">
                allow_stick = #{record.allowStick,jdbcType=BIT},
            </if>
            <if test="record.allowFeed != null">
                allow_feed = #{record.allowFeed,jdbcType=BIT},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update t_contents
        set cid = #{record.cid,jdbcType=INTEGER},
        title = #{record.title,jdbcType=VARCHAR},

        created = #{record.created,jdbcType=INTEGER},
        modified = #{record.modified,jdbcType=INTEGER},
        author_id = #{record.authorId,jdbcType=INTEGER},
        type = #{record.type,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=VARCHAR},
        tags = #{record.tags,jdbcType=VARCHAR},
        categories = #{record.categories,jdbcType=VARCHAR},
        hits = #{record.hits,jdbcType=INTEGER},
        comments_num = #{record.commentsNum,jdbcType=INTEGER},
        allow_comment = #{record.allowComment,jdbcType=BIT},
        allow_stick = #{record.allowStick,jdbcType=BIT},
        allow_feed = #{record.allowFeed,jdbcType=BIT},
        content = #{record.content,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update t_contents
        set cid = #{record.cid,jdbcType=INTEGER},
        title = #{record.title,jdbcType=VARCHAR},

        created = #{record.created,jdbcType=INTEGER},
        modified = #{record.modified,jdbcType=INTEGER},
        author_id = #{record.authorId,jdbcType=INTEGER},
        type = #{record.type,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=VARCHAR},
        tags = #{record.tags,jdbcType=VARCHAR},
        categories = #{record.categories,jdbcType=VARCHAR},
        hits = #{record.hits,jdbcType=INTEGER},
        comments_num = #{record.commentsNum,jdbcType=INTEGER},
        allow_comment = #{record.allowComment,jdbcType=BIT},
        allow_stick = #{record.allowStick,jdbcType=BIT},
        allow_feed = #{record.allowFeed,jdbcType=BIT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.sk.blog.bean.Contents">
        update t_contents
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>

            <if test="created != null">
                created = #{created,jdbcType=INTEGER},
            </if>
            <if test="modified != null">
                modified = #{modified,jdbcType=INTEGER},
            </if>
            <if test="authorId != null">
                author_id = #{authorId,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=VARCHAR},
            </if>
            <if test="tags != null">
                tags = #{tags,jdbcType=VARCHAR},
            </if>
            <if test="categories != null">
                categories = #{categories,jdbcType=VARCHAR},
            </if>
            <if test="hits != null">
                hits = #{hits,jdbcType=INTEGER},
            </if>
            <if test="commentsNum != null">
                comments_num = #{commentsNum,jdbcType=INTEGER},
            </if>
            <if test="allowComment != null">
                allow_comment = #{allowComment,jdbcType=BIT},
            </if>
            <if test="allowStick != null">
                allow_stick = #{allowStick,jdbcType=BIT},
            </if>
            <if test="allowFeed != null">
                allow_feed = #{allowFeed,jdbcType=BIT},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where cid = #{cid,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.sk.blog.bean.Contents">
    update t_contents
    set title = #{title,jdbcType=VARCHAR},

      created = #{created,jdbcType=INTEGER},
      modified = #{modified,jdbcType=INTEGER},
      author_id = #{authorId,jdbcType=INTEGER},
      type = #{type,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      tags = #{tags,jdbcType=VARCHAR},
      categories = #{categories,jdbcType=VARCHAR},
      hits = #{hits,jdbcType=INTEGER},
      comments_num = #{commentsNum,jdbcType=INTEGER},
      allow_comment = #{allowComment,jdbcType=BIT},
      allow_stick = #{allowStick,jdbcType=BIT},
      allow_feed = #{allowFeed,jdbcType=BIT},
      content = #{content,jdbcType=LONGVARCHAR}
    where cid = #{cid,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKey" parameterType="com.sk.blog.bean.Contents">
    update t_contents
     set title = #{title,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      modified = #{modified,jdbcType=INTEGER},
      author_id = #{authorId,jdbcType=INTEGER},
      type = #{type,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      tags = #{tags,jdbcType=VARCHAR},
      categories = #{categories,jdbcType=VARCHAR},
      allow_comment = #{allowComment,jdbcType=BIT},
      allow_stick = #{allowStick,jdbcType=BIT},
      allow_feed = #{allowFeed,jdbcType=BIT}
    where cid = #{cid,jdbcType=INTEGER}
  </update>
</mapper>